
# FROM --platform=linux/amd64 nvidia_opengl_ubuntu22:latest AS base
FROM ubuntu:jammy as dev

#####
# Following lines are copied from
# https://gitlab.com/nvidia/container-images/opengl/-/blob/ubuntu18.04/base/Dockerfile
# and removed :i386 packages (not found)
RUN dpkg --add-architecture i386 \
 && apt-get update \
 && apt-get install -y --no-install-recommends \
        libxau6 libxau6:i386 \
        libxdmcp6 libxdmcp6:i386 \
        libxcb1 libxcb1:i386 \
        libxext6 libxext6:i386 \
        libx11-6 libx11-6:i386 && \
    rm -rf /var/lib/apt/lists/*

# nvidia-container-runtime
ENV NVIDIA_VISIBLE_DEVICES \
        ${NVIDIA_VISIBLE_DEVICES:-all}
ENV NVIDIA_DRIVER_CAPABILITIES \
        ${NVIDIA_DRIVER_CAPABILITIES:+$NVIDIA_DRIVER_CAPABILITIES,}graphics,compat32,utility

RUN echo "/usr/local/nvidia/lib" >> /etc/ld.so.conf.d/nvidia.conf && \
    echo "/usr/local/nvidia/lib64" >> /etc/ld.so.conf.d/nvidia.conf

# https://gitlab.com/nvidia/container-images/opengl/-/blob/ubuntu20.04/NGC-DL-CONTAINER-LICENSE
# COPY nvidia_opengl_ubuntu22/NGC-DL-CONTAINER-LICENSE /

# Required for non-glvnd setups.
ENV LD_LIBRARY_PATH /usr/lib/x86_64-linux-gnu:/usr/lib/i386-linux-gnu${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}:/usr/local/nvidia/lib:/usr/local/nvidia/lib64

#####
# Copied from
# https://gitlab.com/nvidia/container-images/opengl/blob/ubuntu20.04/glvnd/devel/Dockerfile
# and removed :i386 packages (not found)
RUN apt-get update \
 && apt-get install -y --no-install-recommends \
        pkg-config \
        libglvnd-dev libglvnd-dev:i386 \
        libgl1-mesa-dev libgl1-mesa-dev:i386 \
        libegl1-mesa-dev libegl1-mesa-dev:i386 \
        libgles2-mesa-dev libgles2-mesa-dev:i386 && \
    rm -rf /var/lib/apt/lists/*

ENV DEBIAN_FRONTEND=noninteractive

ENV ROS_DISTRO=rolling
ENV AMENT_PREFIX_PATH=/opt/ros/rolling
ENV COLCON_PREFIX_PATH=/opt/ros/rolling
ENV LD_LIBRARY_PATH=/opt/ros/rolling/lib
ENV PATH=/opt/ros/rolling/bin:$PATH
ENV PYTHONPATH=/opt/ros/rolling/lib/python3.8/site-packages
ENV ROS_PYTHON_VERSION=3
ENV ROS_VERSION=2

# FROM base AS dev


# # Copy container-setup scripts
COPY container-setup-scripts/ /container-setup-scripts/

# RUN /container-setup-scripts/install-devtools.sh \
#   && rm -rf /var/lib/apt/lists/*

# # # Install language support
# # RUN /container-setup-scripts/install-language-support.sh \
# #   && rm -rf /var/lib/apt/lists/*
# # ENV LANG en_US.UTF-8

# # # Install timezones
# # RUN /container-setup-scripts/install-timezones.sh \
# #   && rm -rf /var/lib/apt/lists/*

# # Install ROS2
# RUN /container-setup-scripts/install-ros2.sh \
#   && rm -rf /var/lib/apt/lists/*

# This avoids keyboard interaction when asked for geographic area
ARG DEBIAN_FRONTEND=noninteractive

RUN apt-get update \
 && apt-get install -y \
        build-essential \
        cmake \
        cppcheck \
        curl \
        doxygen \
        gdb \
        git \
        gnupg2 \
        libbluetooth-dev \
        libcwiid-dev \
        libgoogle-glog-dev \
        libspnav-dev \
        libusb-dev \
        locales \
        lsb-release \
        mercurial \
        python3-dbg \
        python3-empy \
        python3-numpy \
        python3-pip \
        python3-psutil \
        python3-venv \
        software-properties-common \
        sudo \
        tzdata \
        vim \
        wget \
        curl \
 && apt-get clean

# Set Locale for ROS 2
RUN locale-gen en_US en_US.UTF-8 && \
  update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8 && \
  export LANG=en_US.UTF-8

# Add ROS 2 apt repository
# Set up keys
RUN curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | apt-key add -
# Set up sources.list
RUN sh -c 'echo "deb [arch=amd64,arm64] http://packages.ros.org/ros2/ubuntu `lsb_release -cs` main" > /etc/apt/sources.list.d/ros2-latest.list'

RUN export DEBIAN_FRONTEND=noninteractive

# Install ROS 2, Gazebo, and build tools
# https://colcon.readthedocs.io/en/released/user/installation.html
RUN /bin/sh -c 'wget https://packages.osrfoundation.org/gazebo.gpg -O /usr/share/keyrings/pkgs-osrf-archive-keyring.gpg' \
 && /bin/sh -c 'echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/pkgs-osrf-archive-keyring.gpg] http://packages.osrfoundation.org/gazebo/ubuntu-stable $(lsb_release -cs) main" | tee /etc/apt/sources.list.d/gazebo-stable.list > /dev/null' \
 && apt-get update \
 && apt-get install -y \
    python3-rosdep \
    python3-vcstool \
    python3-colcon-common-extensions \
    python3-colcon-mixin \
    ros-rolling-control-msgs \
    ros-rolling-controller-manager \
    ros-rolling-desktop \
    ros-rolling-generate-parameter-library \
    ros-rolling-geometric-shapes \
    ros-rolling-gripper-controllers \
    ros-rolling-joint-state-broadcaster \
    ros-rolling-joint-state-publisher \
    ros-rolling-joint-trajectory-controller \
    ros-rolling-moveit-common \
    ros-rolling-moveit-configs-utils \
    ros-rolling-moveit-core \
    ros-rolling-moveit-hybrid-planning \
    ros-rolling-moveit-msgs \
    ros-rolling-moveit-resources-panda-moveit-config \
    ros-rolling-moveit-ros-move-group \
    ros-rolling-moveit-ros-perception \
    ros-rolling-moveit-ros-planning \
    ros-rolling-moveit-ros-planning-interface \
    ros-rolling-moveit-ros-visualization \
    ros-rolling-moveit-servo \
    ros-rolling-moveit-visual-tools \
    ros-rolling-moveit \
    ros-rolling-rmw-cyclonedds-cpp \
    ros-rolling-ros2-control \
    ros-rolling-rviz-visual-tools \
    ros-rolling-xacro \
    gz-garden \
 && apt-get clean

ARG USERNAME=developer
ARG USER_UID=1000
ARG USER_GID=$USER_UID

# Create a non-root user
RUN /container-setup-scripts/create-user.sh $USERNAME $USER_UID $USER_GID\
  && echo "source /usr/share/bash-completion/completions/git" >> /home/$USERNAME/.bashrc \
  && echo "source /opt/ros/${ROS_DISTRO}/setup.bash" >> /home/$USERNAME/.bashrc 

# Cleanup
RUN rm -rf /var/lib/apt/lists/* \
    && rm -rf /container-setup-scripts

RUN apt-get update \
   && apt-get autoremove -y \
   && apt-get clean -y \
   && rm -rf /var/lib/apt/lists/*
   
ENV DEBIAN_FRONTEND=dialog

ARG WORKSPACE=/workspaces/trial

# Initialize rosdep
RUN sudo rosdep init && rosdep update

RUN echo "source /opt/ros/rolling/setup.bash;" >> /home/$USERNAME/.bashrc && \
    echo "if [ -f ${WORKSPACE}/install/setup.bash ]; then source ${WORKSPACE}/install/setup.bash; fi" >> /home/$USERNAME/.bashrc

USER $USERNAME
